{"version":3,"sources":["components/Timer.tsx","components/ResultAlert.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Timer","React","memo","setShowResultAlert","setStartGame","useState","timer","setTimer","interv","useRef","console","log","setTimeout","clearInterval","current","className","onClick","setInterval","getSeconds","slice","minutes","Math","floor","formatTime","ResultAlert","score","App","quote","setQuote","inputValue","setInputValue","setScore","showResultAlert","startGame","useEffect","axios","get","then","data","text","split","map","el","i","color","length","value","onChange","e","target","join","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kMAgDeA,EAxCiBC,IAAMC,MAAK,YAA2C,IAAxCC,EAAuC,EAAvCA,mBAAoBC,EAAmB,EAAnBA,aAAmB,EACvDC,mBAAS,KAD8C,mBAC1EC,EAD0E,KACnEC,EADmE,KAE3EC,EAAsCC,iBAAO,MAQnDC,QAAQC,IAAI,UAsBZ,OARc,IAAVL,GACAM,YAAW,WACPC,cAAcL,EAAOM,SACrBX,GAAmB,MAMvB,sBAAKY,UAAU,QAAf,UACI,wBAAQA,UAAU,SAASC,QArBnC,WACIZ,GAAa,GATbI,EAAOM,QAAUG,aAAY,WACzBV,GAAS,SAAAD,GAAK,OAAIA,EAAQ,OAC3B,MA2BC,mBACA,qBAAKS,UAAU,QAAf,SAjBW,SAACT,GAChB,IAAMY,EAAqB,WAAKZ,EAAQ,IAAMa,OAAO,GAC/CC,EAAe,UAAMC,KAAKC,MAAMhB,EAAQ,KAC9C,MAAM,GAAN,OAAUc,EAAV,cAAuBF,GAcKK,CAAWjB,WCrBhCkB,EAduB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOtB,EAAyB,EAAzBA,mBAM5C,OACI,sBAAKY,UAAU,eAAf,UACI,oBAAIA,UAAU,4BAAd,gNAAqFU,KACrF,wBAAQT,QAPM,WAClBb,GAAmB,IAMiBY,UAAU,8BAA1C,mH,iBCoDGW,G,MA7DO,WAAO,IAAD,EACArB,mBAAwB,IADxB,mBACnBsB,EADmB,KACZC,EADY,OAEUvB,mBAAiB,IAF3B,mBAEnBwB,EAFmB,KAEPC,EAFO,OAGAzB,mBAAiB,GAHjB,mBAGnBoB,EAHmB,KAGZM,EAHY,OAIoB1B,oBAAkB,GAJtC,mBAInB2B,EAJmB,KAIF7B,EAJE,OAKQE,oBAAkB,GAL1B,mBAKnB4B,EALmB,KAKR7B,EALQ,KAQ1B8B,qBAAU,WACRC,IAAMC,IAAI,iDAAiDC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACjEV,EAASU,EAAKC,KAAKC,MAAM,UAE1B,CAACf,IAaJ,OACE,sBAAKV,UAAU,MAAf,UAGIiB,EAAkB,cAAC,EAAD,CAAaP,MAAOA,EAAOtB,mBAAoBA,IAAyB,KAE5F,oBAAIY,UAAU,QAAd,8BACA,cAAC,EAAD,CAAOX,aAAcA,EAAcD,mBAAoBA,KAGpD6B,GAAmBC,EAClB,qCACE,qBAAIlB,UAAU,cAAd,uCAAmCU,KACnC,sBAAKV,UAAU,UAAf,UACE,qBAAKA,UAAU,eAAf,SAEIY,EAAMc,KAAI,SAACC,EAAIC,GACb,IAAIC,EAIJ,OAHID,EAAId,EAAWgB,SACjBD,EAAQF,IAAOb,EAAWc,GAAK,UAAY,aAEtC,sBAAc5B,UAAW6B,EAAzB,mBAAoCF,IAAzBC,QAIxB,qBAAK5B,UAAU,mBAAf,SACE,0BAAU+B,MAAOjB,EAAYkB,SArCtB,SAACC,GACpB,IAAIF,EAAQE,EAAEC,OAAOH,MACrBhB,EAAcgB,GACVA,IAAUnB,EAAMuB,KAAK,KAAOvB,EAAMkB,OAAS,IAC7Cf,EAAc,IACdC,EAASN,EAAQ,KAgC8CV,UAAU,kCAInE,UCjDGoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f898546f.chunk.js","sourcesContent":["import React, { useState, useRef, } from 'react';\r\n\r\ninterface Iprops {\r\n    setShowResultAlert: React.Dispatch<React.SetStateAction<boolean>>\r\n    setStartGame: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\n\r\nconst Timer: React.FC<Iprops> = React.memo(({ setShowResultAlert, setStartGame }) => {\r\n    const [timer, setTimer] = useState(180);\r\n    const interv: React.MutableRefObject<any> = useRef(null);\r\n\r\n    const run = () => {\r\n        interv.current = setInterval(() => {\r\n            setTimer(timer => timer - 1);\r\n        }, 1000)\r\n    }\r\n\r\n    console.log('render');\r\n\r\n\r\n    function startTimer() {\r\n        setStartGame(true);\r\n        run();\r\n    }\r\n\r\n    const formatTime = (timer: number) => {\r\n        const getSeconds: string = `0${(timer % 60)}`.slice(-2);\r\n        const minutes: string = `${Math.floor(timer / 60)}`;\r\n        return `${minutes} : ${getSeconds}`;\r\n    }\r\n\r\n    if (timer === 0) {\r\n        setTimeout(() => {\r\n            clearInterval(interv.current);\r\n            setShowResultAlert(true);\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='timer'>\r\n            <button className='button' onClick={startTimer}>start</button>\r\n            <div className='title'>{formatTime(timer)}</div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\n\r\n\r\ninterface IProps {\r\n    score: number,\r\n    setShowResultAlert(value: boolean): void,\r\n}\r\n\r\nconst ResultAlert: React.FC<IProps> = ({ score, setShowResultAlert }) => {\r\n\r\n    const handleNewGame = () => {\r\n        setShowResultAlert(false);\r\n    }\r\n\r\n    return (\r\n        <div className='result-alert'>\r\n            <h2 className='result-alert__title title'>{`Время вышло, игра закончена. Ваш счет: ${score}`}</h2>\r\n            <button onClick={handleNewGame} className='result-alert__button button'>Попробовать снова</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultAlert; \r\n","import React, { useEffect, useState } from 'react';\nimport Timer from './components/Timer';\nimport ResultAlert from './components/ResultAlert';\nimport axios from 'axios';\nimport './scss/app.scss';\n\n\n\nconst App: React.FC = () => {\n  const [quote, setQuote] = useState<Array<string>>([]);\n  const [inputValue, setInputValue] = useState<string>('');\n  const [score, setScore] = useState<number>(0);\n  const [showResultAlert, setShowResultAlert] = useState<boolean>(false);\n  const [startGame, setStartGame] = useState<boolean>(false);\n\n\n  useEffect(() => {\n    axios.get('https://fish-text.ru/get?format=json&number=1').then(({ data }) => {\n      setQuote(data.text.split(''));\n    })\n  }, [score]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    let value = e.target.value;\n    setInputValue(value);\n    if (value === quote.join('') && quote.length > 0) {\n      setInputValue('');\n      setScore(score + 1);\n    }\n  }\n\n\n\n  return (\n    <div className='app'>\n\n      {\n        showResultAlert ? <ResultAlert score={score} setShowResultAlert={setShowResultAlert} /> : null\n      }\n      <h1 className='title'>Fast typing game</h1>\n      <Timer setStartGame={setStartGame} setShowResultAlert={setShowResultAlert} />\n\n      {\n        !showResultAlert && startGame ?\n          <>\n            <h2 className='score title'>Счет: {score}</h2>\n            <div className='content'>\n              <div className=\"content__top\">\n                {\n                  quote.map((el, i) => {\n                    let color;\n                    if (i < inputValue.length) {\n                      color = el === inputValue[i] ? 'correct' : 'incorrect';\n                    }\n                    return <span key={i} className={color}>{`${el}`}</span>\n                  })\n                }\n              </div>\n              <div className=\"content__bottoom\">\n                <textarea value={inputValue} onChange={handleChange} className=\"content__bottom-input\"></textarea>\n              </div>\n            </div>\n          </>\n          : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); \n"],"sourceRoot":""}